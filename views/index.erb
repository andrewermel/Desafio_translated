<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Slack Translator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f7f6;
    }

    header {
      background-color: #0073e6;
      color: white;
      text-align: center;
      padding: 15px;
    }

    h1 {
      margin: 0;
      font-size: 2rem;
    }

    .content {
      padding: 20px;
    }

    .messages-container {
      background-color: #ffffff;
      padding: 15px;
      margin-bottom: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      max-height: 400px;
      overflow-y: auto;
      scroll-behavior: smooth;
      display: flex;
      flex-direction: column;
    }

    .messages-wrapper {
      display: flex;
      flex-direction: column;
      min-height: min-content;
    }

    .message {
      background-color: #f8f9fa;
      padding: 15px;
      margin-bottom: 10px;
      border-radius: 8px;
      border: 1px solid #e9ecef;
    }

    .message:last-child {
      margin-bottom: 0;
    }

    .translation-section {
      background-color: #ffffff;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-top: 20px;
    }

    .message strong {
      color: #333;
    }

    textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin-bottom: 10px;
      resize: vertical;
    }

    button {
      background-color: #28a745;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #218838;
    }

    #confirm-section {
      display: none;
      background-color: #fff;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    #confirm-section p {
      margin: 0;
      font-size: 1.1rem;
    }

    #error-message {
      color: red;
      margin-top: 10px;
      font-weight: bold;
    }

    #success-message {
      color: green;
      margin-top: 10px;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <header>
    <h1>Slack Translator</h1>
  </header>

  <div class="content">
    <h2>Mensagens</h2>
    
    <div class="messages-container">
      <div class="messages-wrapper">
        <% messages.each do |m| %>
          <div class="message">
            <p><strong>EN:</strong> <%= m[:original] %></p>
            <p><strong>PT:</strong> <%= m[:translated] %></p>
          </div>
        <% end %>
      </div>
    </div>

    <div class="translation-section">
      <form action="/reply" method="post" id="reply-form">
        <textarea name="text" placeholder="Digite sua mensagem em português" required></textarea><br>
        <button type="submit">Visualizar tradução</button>
      </form>

      <div id="error-message"></div>
      <div id="success-message"></div>

      <div id="confirm-section">
        <p><strong>Texto original (PT):</strong> <span id="original-text"></span></p>
        <p><strong>Tradução (EN):</strong> <span id="translated-text"></span></p>
        <form action="/send" method="post" id="send-form">
          <input type="hidden" name="text" id="final-text">
          <input type="hidden" name="original" id="original-text-input">
          <button type="submit">Confirmar e enviar</button>
          <button type="button" onclick="document.getElementById('confirm-section').style.display = 'none'">Cancelar</button>
        </form>
      </div>
    </div>
  </div>

  <script>
    document.getElementById('reply-form').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const data = new FormData(form);
      const errorMessage = document.getElementById('error-message');
      const successMessage = document.getElementById('success-message');
      const originalText = form.querySelector('textarea').value;

      errorMessage.textContent = '';
      successMessage.textContent = '';

      try {
        const res = await fetch('/reply', { method: 'POST', body: data });
        const json = await res.json();

        if (res.ok) {
          document.getElementById('original-text').textContent = originalText;
          document.getElementById('translated-text').textContent = json.translated;
          document.getElementById('final-text').value = json.translated;
          document.getElementById('original-text-input').value = originalText;
          document.getElementById('confirm-section').style.display = 'block';
          form.querySelector('textarea').value = ''; // Limpa o campo após tradução
          successMessage.textContent = 'Tradução realizada! Por favor, confirme antes de enviar.';
        } else {
          errorMessage.textContent = json.error || 'Erro ao traduzir. Tente novamente.';
        }
      } catch (error) {
        errorMessage.textContent = 'Erro de comunicação com o servidor. Tente novamente.';
      }
    };

    // Função aprimorada para rolar para a última mensagem
    function scrollToBottom(container) {
      // Força um reflow para garantir que temos a altura correta
      container.offsetHeight;
      
      // Rola para o final com um pequeno ajuste extra para garantir
      container.scrollTop = container.scrollHeight + 100;
      
      // Agenda uma segunda rolagem para garantir após o DOM ter sido atualizado
      setTimeout(() => {
        container.scrollTop = container.scrollHeight + 100;
      }, 100);
    }

    // Função para buscar e atualizar mensagens
    async function atualizarMensagens() {
      try {
        const response = await fetch('/messages');
        const messages = await response.json();
        const messagesContainer = document.querySelector('.messages-container');
        const messagesWrapper = document.querySelector('.messages-wrapper');
        
        // Verifica se estava no final antes da atualização
        const isAtBottom = Math.abs(
          messagesContainer.scrollHeight - 
          messagesContainer.scrollTop - 
          messagesContainer.clientHeight
        ) < 10;
        
        const messagesHtml = messages.map(m => `
          <div class="message">
            <p><strong>EN:</strong> ${m.original}</p>
            <p><strong>PT:</strong> ${m.translated}</p>
          </div>
        `).join('');
        
        messagesWrapper.innerHTML = messagesHtml;

        // Rola para o final se estava no final antes ou se é a primeira carga
        if (isAtBottom || messages.length > 0) {
          scrollToBottom(messagesContainer);
        }
      } catch (error) {
        console.error('Erro ao atualizar mensagens:', error);
      }
    }

    // Atualiza as mensagens a cada 5 segundos
    setInterval(atualizarMensagens, 5000);

    // Garante que comece rolado para baixo e ajusta após o carregamento completo
    document.addEventListener('DOMContentLoaded', function() {
      const messagesContainer = document.querySelector('.messages-container');
      scrollToBottom(messagesContainer);
      
      // Garante que role novamente após todas as imagens e recursos carregarem
      window.addEventListener('load', function() {
        scrollToBottom(messagesContainer);
      });
    });

    // Garante que role para baixo após enviar uma nova mensagem
    document.getElementById('send-form').addEventListener('submit', function() {
      setTimeout(() => {
        const messagesContainer = document.querySelector('.messages-container');
        scrollToBottom(messagesContainer);
      }, 100);
    });
  </script>

</body>
</html>
